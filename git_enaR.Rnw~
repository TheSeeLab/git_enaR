\documentclass[12pt]{article}
\usepackage{color}
\usepackage{cite}
\usepackage{geometry}                % See geometry.pdf to learn the layout options. There are lots.
%\usepackage{pdflscape}        %single page landscape
                                %mode \begin{landscape} \end{landscape}
\geometry{letterpaper}                   % ... or a4paper or a5paper or ... 
%\usepackage[parfill]{parskip}    % Activate to begin paragraphs with an empty line rather than an indent
\usepackage{multicol} % \begin{multicols}{number of columns} \end{multicols}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{Sweave}
\newcommand{\etal}{\textit{et al.}}
\usepackage{hyperref}  
%\hyperref[label_name]{''link text''}
%\hyperlink{label}{anchor caption}
%\hypertarget{label}{link caption}
\hypersetup{
  colorlinks   = true,
  citecolor    = gray
}
\linespread{1.5}

\title{git enaR: a workflow summary}
\author{M.K. Lau}
%\date{}                                           % Activate to display a given date or no date

\begin{document}
\maketitle

\section{What is git?}

\begin{itemize}
\item A system for keeping track of changes to a project.
\item Git is noted for its decentralized structure, so multiple people
  can use be working on a project simultaneously.
\item Git can seem a bit esoteric at first, but is intuitive once you
  get into it.
\end{itemize}

\section{What is github?}

\begin{itemize}
\item An organizing server that provides space and interfaces for
  projects that use git.
\end{itemize}

\section{What's the scoop?}

Say you have a project and you want to keep track of changes made to
it. The nucleus of git is that it does this by starting with an
original project (called the ``origin'' in git parlance) and then only
keeping track of the changes made to it (as opposed to keeping entire
copies of new versions of the same files). 

The gist of git is:

\begin{enumerate}
\item Initiate a new project or link in to an existing project, aka. repository, (git
  init or git clone)
\item Tell git to track files that you are changing (git add --all)
\item Edit old files and create new files 
\item Tell git to log changes made to your files (git commit -m
  'Insert annotation here!')
\item Merge your changes with the project (git merge origin)
\end{enumerate}

\hypersetup{linkcolor=green}

\section{What do I do first?}

\begin{itemize}
\item Register with github by \href{https://github.com/users}{creating
an account here}. Note that it's free as long as you stay below 1GB
  and keep it all open-source.
\item \href{https://help.github.com/articles/set-up-git}{Get git here.}
\item
  \href{https://help.github.com/articles/set-up-git#set-up-git}{Setup your git account.}
\end{itemize}

\section{Try it out}

\begin{enumerate}
\item Make a new directory called ``git\textunderscore test''
  (i.e. ``mkdir git\textunderscore test'')
\item Change to this new directory (i.e. ``cd git\textunderscore test'')
\item Initialize the new repository with ``git init''
\item Make a new file called ``README''
\item Tell git to track README with ``git add README''
\item Now, see what git is doing with ``git status''
\item Add the words ``I made this README file.'' to README
\item Check the status ``git status''
\item You can now ``commit'' these changes to the project with ``git
  commit -a -m 'Created README.'
\item Check the status.
\end{enumerate}

You now know the basics of git. The ``add-commit'' procedure is
repeated every time you are making changes to the project. 

Don't worry if you make some changes before adding files. If you add them later,
git will recognize the changes that you've made. 

Make sure to annotate the changes that you are committing. There's no
hard rules, but generally changes should be committed grouped together
based on tasks (e.g. ``Fixed a bug in a function.''). Google ``git
best practices'' for more info.

\section{How do I use git with github for enaR?}

\textbf{.gitignore}

Unless you tell it otherwise, git will pay attention (although not
necessarily track) all of your files in your repository. In general,
you should only be tracking the files that you yourself are changing
and not files that are being autogenerated. 

To do this, create a ``.gitignore'' file that will list which files
git will ignore. Let's create one so that git will play nicely with
emacs.

\begin{itemize}
\item Create an empty file named ``$\sim$/.gitignore''
\item Add one line that says ``$\ast$$\sim$''. This stops git from tracking
  emacs' recovery files.
\item Note the syntax with the use of the wild card symbol
  $\ast$. This tells git that any file name that ends with a tilde
  (i.e. $\sim$) should be ignored. 
\end{itemize}

\textbf{Clone enaR}

\textbf{Checkout a branch}

\textbf{Push a branch to the origin}

\textbf{Pull enaR origin and merge}

\end{document}  


